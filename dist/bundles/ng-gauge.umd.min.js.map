{
  "version": 3,
  "file": "ng-gauge.umd.min.js",
  "sources": [
    "ng://ng-gauge/out/gauge/gauge.component.ts",
    "ng://ng-gauge/out/gauge/gauge.module.ts",
    "ng://ng-gauge/out/gauge/shared/gauge-label.ts",
    "ng://ng-gauge/out/gauge/shared/gauge-segment.ts"
  ],
  "sourcesContent": [
    "/**\n * @category   Component\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n **/\n\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { GaugeLabel } from './shared/gauge-label';\nimport { GaugeSegment } from './shared/gauge-segment';\n\n@Component({\n  selector: 'ng-gauge',\n  template: `<svg viewBox=\"0 0 200 200\">\n  <g\n    class=kw-holder\n    [attr.transform]=\"isIE11 ? 'translate(100 100) rotate(-90)' : ''\">\n    <circle\n      class=kw-back\n      [attr.r]=\"bgRadius\"\n      [style.fill]=bgColor/>\n\n      <g\n        *ngFor=\"let segment of sortedSegments\">\n        <circle\n          class=kw-mid\n          [style.stroke]=segment.bgColor\n          [style.strokeWidth]=segment.borderWidth\n          [attr.r]=segment.computedRadius/>\n\n          <circle\n            class=kw-front\n\n            [style.transition]=\"'stroke-dasharray ' + animationSecs + 's'\"\n            [style.stroke]=segment.color\n            [style.strokeWidth]=segment.borderWidth\n            [style.strokeDasharray]=\"segmentsLoaded ? segment.strokeProgress : segment.strokeEmptyProgress\"\n            [style.strokeLinecap]=\"rounded ? 'round' : ''\"\n            [attr.r]=segment.computedRadius/>\n      </g>\n  </g>\n\n  <g\n    transform=\"translate(100, 100)\">\n    <text\n      class=kw-label\n      *ngFor=\"let label of labels\"\n      [attr.x]=label.x\n      [attr.y]=label.y\n      [style.fill]=label.color\n      [style.fontSize]=label.fontSize\n      text-anchor=middle>\n      {{label.text}}\n    </text>\n  </g>\n</svg>\n`,\n  styles: [`.kw-front,.kw-mid{fill:transparent}.kw-holder{-webkit-transform:translate(100px,100px) rotate(-90deg);transform:translate(100px,100px) rotate(-90deg)}`]\n})\nexport class GaugeComponent implements OnInit {\n  @Input() bgRadius = 100;\n  @Input() bgColor: string;\n  @Input() rounded = true;\n  @Input() reverse = false;\n  @Input() animationSecs = 0.5;\n\n  @Input() labels: GaugeLabel[];\n\n\n  @Input()\n  set segments(segments: GaugeSegment[]) {\n    this.segmentsLoaded = false;\n    this.sortedSegments = this.sortSegments(segments);\n\n    // wait a bit and start animation\n    setTimeout(\n      () => this.segmentsLoaded = true,\n      0);\n  }\n  sortedSegments: GaugeSegment[];\n  segmentsLoaded = false;\n\n  isIE11 = /Trident.*rv[ :]*11\\./.test(navigator.userAgent);\n\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  sortSegments(segments: GaugeSegment[]) {\n    return segments && segments.sort((a: GaugeSegment, b: GaugeSegment) => {\n      if (this.reverse) {\n        return (a.value / a.goal > b.value / b.goal) ? 1 : -1;\n      } else {\n        return (a.value / a.goal > b.value / b.goal) ? -1 : 1;\n      }\n    });\n  }\n}\n",
    "/**\n * @category   Module\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n **/\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { GaugeComponent } from './gauge.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [GaugeComponent],\n  exports: [GaugeComponent]\n})\nexport class GaugeModule { }\n",
    "/**\n * @category   Model\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n**/\n\n\n\n\n// ANGULAR\n\n\n\n\n// EXTERNAL\n\n\n\n\n// OWN\n\n\n\n\n\nexport class GaugeLabel {\n  color: string;\n  text: string;\n  x: number;\n  y: number;\n  fontSize: string;\n\n\n  constructor(options: {\n    color?: string,\n    text?: string,\n    x?: number,\n    y?: number,\n    fontSize?: string\n  } = {}) {\n    this.color = options.color;\n    this.text = options.text;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.fontSize = options.fontSize || '1em';\n  }\n}\n",
    "/**\n * @category   Model\n * @package    com.kiwity.gauge.gauge\n * @author     Salvador Subarroca (subarroca@gmail.com)\n**/\n\n\n\n\n// ANGULAR\n\n\n\n\n// EXTERNAL\n\n\n\n\n// OWN\n\n\n\n\n\nexport class GaugeSegment {\n  radius: number;\n  goal: number;\n  value: number;\n  color: string;\n  bgColor: string;\n  borderWidth: number;\n\n\n  constructor(options: {\n    radius?: number,\n    goal?: number,\n    value?: number,\n    color?: string,\n    bgColor?: string,\n    borderWidth?: number\n  } = {}) {\n    this.radius = options.radius || 100;\n    this.goal = options.goal || 100;\n    this.value = options.value;\n    this.color = options.color;\n    this.bgColor = options.bgColor || 'transparent';\n    this.borderWidth = options.borderWidth || 100;\n  }\n\n\n\n  get computedRadius() {\n    return this.radius - this.borderWidth / 2;\n  }\n\n  get strokeProgress(this: GaugeSegment) {\n    return `${2 * Math.PI * this.computedRadius * this.value / this.goal} ${2 * Math.PI * this.computedRadius}`;\n  }\n\n  get strokeEmptyProgress(this: GaugeSegment) {\n    return `0 ${2 * Math.PI * this.computedRadius}`;\n  }\n}\n"
  ],
  "names": [
    "GaugeComponent",
    "this",
    "bgRadius",
    "rounded",
    "reverse",
    "animationSecs",
    "segmentsLoaded",
    "isIE11",
    "test",
    "navigator",
    "userAgent",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "segments",
    "_this",
    "sortedSegments",
    "sortSegments",
    "setTimeout",
    "ngOnInit",
    "sort",
    "a",
    "b",
    "value",
    "goal",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "Input",
    "bgColor",
    "labels",
    "GaugeModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "GaugeLabel",
    "options",
    "color",
    "text",
    "x",
    "y",
    "fontSize",
    "GaugeSegment",
    "radius",
    "borderWidth",
    "get",
    "Math",
    "PI",
    "computedRadius"
  ],
  "mappings": "yTAMA,IAAAA,EAAA,WAgFE,SAAFA,IA1BAC,KAAAC,SAAsB,IAEtBD,KAAAE,SAAqB,EACrBF,KAAAG,SAAqB,EACrBH,KAAAI,cAA2B,GAgB3BJ,KAAAK,gBAAmB,EAEnBL,KAAAM,OAAW,uBAAuBC,KAAKC,UAAUC,kBAZjDC,OAAAC,eAAMZ,EAANa,UAAA,WAAA,CAAAC,IAAA,SAAeC,GAAf,IAAAC,EAAAf,KACIA,KAAKK,gBAAiB,EACtBL,KAAKgB,eAAiBhB,KAAKiB,aAAaH,GAGxCI,WACE,WAAM,OAAAH,EAAKV,gBAAiB,GAC5B,oCAWJN,EAAFa,UAAAO,SAAE,aAGApB,EAAFa,UAAAK,aAAE,SAAaH,GAAb,IAAFC,EAAAf,KACI,OAAOc,GAAYA,EAASM,KAAK,SAACC,EAAiBC,GACjD,OAAIP,EAAKZ,QACCkB,EAAEE,MAAQF,EAAEG,KAAOF,EAAEC,MAAQD,EAAEE,KAAQ,GAAK,EAE5CH,EAAEE,MAAQF,EAAEG,KAAOF,EAAEC,MAAQD,EAAEE,MAAS,EAAI,OA1F5D,iBAKA,CAAAC,KAACC,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,WACVC,SAAU,4tCA4CVC,OAAQ,CAAC,sNAGX7B,SAAA,CAAA,CAAAwB,KAAGM,EAAAA,QACHC,QAAA,CAAA,CAAAP,KAAGM,EAAAA,QACH7B,QAAA,CAAA,CAAAuB,KAAGM,EAAAA,QACH5B,QAAA,CAAA,CAAAsB,KAAGM,EAAAA,QACH3B,cAAA,CAAA,CAAAqB,KAAGM,EAAAA,QAEHE,OAAA,CAAA,CAAAR,KAAGM,EAAAA,QAGHjB,SAAA,CAAA,CAAAW,KAAGM,EAAAA,SC/DH,IAAAG,EAAA,2BAMA,CAAAT,KAACU,EAAAA,SAADR,KAAA,CAAU,CACRS,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAACvC,GACfwC,QAAS,CAACxC,OCQZ,IAAAyC,EAQE,SAAYC,QAAd,IAAAA,IAAcA,EAAd,IAOIzC,KAAK0C,MAAQD,EAAQC,MACrB1C,KAAK2C,KAAOF,EAAQE,KACpB3C,KAAK4C,EAAIH,EAAQG,GAAK,EACtB5C,KAAK6C,EAAIJ,EAAQI,GAAK,EACtB7C,KAAK8C,SAAWL,EAAQK,UAAY,OCnBxCC,EAAA,WASE,SAAFA,EAAcN,QAAd,IAAAA,IAAcA,EAAd,IAQIzC,KAAKgD,OAASP,EAAQO,QAAU,IAChChD,KAAKwB,KAAOiB,EAAQjB,MAAQ,IAC5BxB,KAAKuB,MAAQkB,EAAQlB,MACrBvB,KAAK0C,MAAQD,EAAQC,MACrB1C,KAAKgC,QAAUS,EAAQT,SAAW,cAClChC,KAAKiD,YAAcR,EAAQQ,aAAe,IAgB9C,OAXEvC,OAAFC,eAAMoC,EAANnC,UAAA,iBAAA,CAAAsC,IAAE,WACE,OAAOlD,KAAKgD,OAAShD,KAAKiD,YAAc,mCAG1CvC,OAAFC,eAAMoC,EAANnC,UAAA,iBAAA,CAAAsC,IAAE,WACE,OAAU,EAAIC,KAAKC,GAAKpD,KAAKqD,eAAiBrD,KAAKuB,MAAQvB,KAAKwB,KAApE,IAA4E,EAAI2B,KAAKC,GAAKpD,KAAKqD,gDAG7F3C,OAAFC,eAAMoC,EAANnC,UAAA,sBAAA,CAAAsC,IAAE,WACE,MAAO,KAAK,EAAIC,KAAKC,GAAKpD,KAAKqD,gDAEnCN,EAtCA"
}
